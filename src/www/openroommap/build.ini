;
; All options in the [DEFAULT] section are inherited by all other sections.
;
; Apart from some special options (see below), all options are in the form
; "option = value", where "value" replaces "option" placeholders in the html.
;
; "page_upd = 1 Dec 2007" will replace all of:
;
;     1. <!--TPL_PAGE_UPD-->
;     2. <!--TPL_PAGE_UPD_START--> any text here <--TPL_PAGE_UPD_END-->
;
;     in the html code with the string "1 Dec 2007".
;
; plchldr = <foo.bar means that file foo.bar is read and its contents are used
;     as the valule. URLs work too, e.g. option = <http://server/dir/file
;     If the first line in foo.bar is "#!sidebar" then the file is parsed
;     as a CSV file for sidebar links using syntax provided in the DTG website
;     skeleton. See the sample file sidebar.csv for more details.
;
; plchldr = !command means that "command" is executed and its output used as
;     the replacement string.
;
; plchldr = %python_code means that "python_code" is evaluated as Python code
;     and any output to stdout is used as the replacement string.
;
; You need to escape the characters <, !, % with \<, \!, \% if you do not want
; the above behaviour. The program can detect HTML tags and prevent expansion
; e.g. option = <img src="cam.jpg" alt="Cam" /> will not trigger a file read.
;
; Special options:
;
; skel - the website skeleton which holds all the placeholders.
; body - main content to replace <!--TPL_BODY-->. By default, the section name
;        provides it, i.e. [about/index.tpl] wil set body = <about/index.tpl.
;        You can of course override it by including a body = ... option.
; out  - the output filename. If this is missing then attempts to work it out
;        from the section name, e.g. [dir/file.tpl] or [dir/file.tpl.html] will
;        output into dir/file.html. An error is raised on failure.
;
; You can use multi-line values if subsequent lines start with a space or tab:
; head = <style type="text/css">
;     h2 { font-style: italic; }
;     </style>
;
; You can use variable names here to refer to option values in the same section
; or in the DEFAULT section. For example:
;   _updtxt = Last updated on
;   updated = %(_updtxt)s 1 Dec 2007
;

[DEFAULT]
skel = <http://www.cl.cam.ac.uk/research/dtg/www/skel/

_navhref = /research/dtg/openroommap
_navbar = <li><a href="%(_navhref)s/">Open Room Map</a></li>
navbar = %(_navbar)s

sidebar_orm = sidebar:
	2, Edit the Map, %(_navhref)s/edit/
    2, Building Inventory, %(_navhref)s/inventory/
    2, About OpenRoomMap, %(_navhref)s/
    
_title = OpenRoomMap
title = %(_title)s

[index-tpl.html]

[static/bogus]
; output a file with ORM splaceholders that the Perl script can substitute
body = <!--ORM_BODY-->
head = <!--ORM_HEAD-->
out = static/static.html
title = %(_title)s - Browse
navbar = %(_navbar)s <li><a href="%(_navhref)s/static/">Browse</a></li>

[inventory/bogus]
; output a file with ORM splaceholders that the Perl script can substitute
body = <!--ORM_BODY-->
out = inventory/static.html
title = %(_title)s - Inventory
navbar = %(_navbar)s <li><a href="%(_navhref)s/inventory">Inventory</a></li>

[edit/index-tpl.html]
navbar = %(_navbar)s <li><a href="%(_navhref)s/edit/">Edit</a></li>
title = %(_title)s - Edit
head = <script type="text/javascript" src="hookMouseWheel.js"></script>
    <script type="text/javascript" src="swfobject.js"></script>
    <script type="text/javascript">
        swfobject.embedSWF("orm.swf", "myContent", "100%", "740", "9.0.0", "expressInstall.swf");
        function scroll_orm () { document.location.href = '#orm-pos'; }
        window.onload = scroll_orm;
    </script>
